// ignore_for_file: public_member_api_docs, sort_constructors_first

import 'dart:convert';

import 'package:flutter/foundation.dart';

import '../shared/user.dart';
import 'idea_hypothesis.dart';

enum SITTechniques {
  taskUnification,
  substraction,
  multiplication,
  division,
  attributeDependency,
}

class Idea {
  /// idea uid
  String id;

  /// idea concept, generated by a technique
  String concept;

  /// readable name
  String name;

  /// Rating level for the idea, 1- lowest/not good, 5- highest/the best
  int rating;

  /// benefit(s) of the idea
  int benefit;

  /// technique used to generate this idea
  SITTechniques method;

  /// Component releated to this idea
  String componentId;

  /// Attributes related to this idea, use in Attribute Dependency technique
  List<String> attributeIds;

  /// When the idea is created
  String createdAt;

  /// When the idea is updated
  String updatedAt;

  /// Owner of this idea
  User createdBy;

  /// Desirability assumption of the idea
  IdeaHypothesis desirability;

  /// Viability assumption of the idea
  IdeaHypothesis viability;

  /// Feasibility of the idea
  IdeaHypothesis feasibility;

  Idea({
    required this.id,
    required this.concept,
    required this.name,
    required this.rating,
    required this.benefit,
    required this.method,
    required this.componentId,
    required this.attributeIds,
    required this.createdAt,
    required this.updatedAt,
    required this.createdBy,
    required this.desirability,
    required this.viability,
    required this.feasibility,
  });

  Idea copyWith({
    String? id,
    String? concept,
    String? name,
    int? rating,
    int? benefit,
    SITTechniques? method,
    String? componentId,
    List<String>? attributeIds,
    String? createdAt,
    String? updatedAt,
    User? createdBy,
    IdeaHypothesis? feasibility,
    IdeaHypothesis? viability,
    IdeaHypothesis? desirability,
  }) {
    return Idea(
      id: id ?? this.id,
      concept: concept ?? this.concept,
      name: name ?? this.name,
      rating: rating ?? this.rating,
      benefit: benefit ?? this.benefit,
      method: method ?? this.method,
      componentId: componentId ?? this.componentId,
      attributeIds: attributeIds ?? this.attributeIds,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      createdBy: createdBy ?? this.createdBy,
      desirability: desirability ?? this.desirability,
      feasibility: feasibility ?? this.feasibility,
      viability: viability ?? this.viability,
    );
  }

  Map<String, dynamic> toMap() {
    return <String, dynamic>{
      'id': id,
      'concept': concept,
      'name': name,
      'rating': rating,
      'benefit': benefit,
      'method': method.name,
      'componentId': componentId,
      'attributeIds': attributeIds,
      'createdAt': createdAt,
      'updatedAt': updatedAt,
      'createdBy': createdBy.toMap(),
      'viability': viability.toMap(),
      'desirability': desirability.toMap(),
      'feasibility': feasibility.toMap(),
    };
  }

  factory Idea.fromMap(Map<String, dynamic> map) {
    return Idea(
      id: map['id'] as String,
      concept: map['concept'] as String,
      name: map['name'] as String,
      rating: map['rating'] as int,
      benefit: map['benefit'] as int,
      method: SITTechniques.values.byName(map['method']),
      componentId: map['componentId'] as String,
      attributeIds: List<String>.from(map['attributeIds'] as List<String>),
      createdAt: map['createdAt'],
      updatedAt: map['updatedAt'],
      createdBy: User.fromMap(map['createdBy']),
      desirability: IdeaHypothesis.fromMap(map['desirability']),
      feasibility: IdeaHypothesis.fromMap(map['feasibility']),
      viability: IdeaHypothesis.fromMap(map['viability']),
    );
  }

  String toJson() => json.encode(toMap());

  factory Idea.fromJson(String source) => Idea.fromMap(json.decode(source) as Map<String, dynamic>);

  @override
  String toString() {
    return 'Idea(id: $id, concept: $concept, name: $name, rating: $rating, benefit: $benefit, method: $method, componentId: $componentId, attributeIds: $attributeIds, createdAt: $createdAt, updatedAt: $updatedAt, createdBy: $createdBy)';
  }

  @override
  bool operator ==(covariant Idea other) {
    if (identical(this, other)) return true;

    return other.id == id &&
        other.concept == concept &&
        other.name == name &&
        other.rating == rating &&
        other.benefit == benefit &&
        other.method == method &&
        other.componentId == componentId &&
        listEquals(other.attributeIds, attributeIds) &&
        other.createdAt == createdAt &&
        other.updatedAt == updatedAt &&
        other.createdBy == createdBy;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        concept.hashCode ^
        name.hashCode ^
        rating.hashCode ^
        benefit.hashCode ^
        method.hashCode ^
        componentId.hashCode ^
        attributeIds.hashCode ^
        createdAt.hashCode ^
        updatedAt.hashCode ^
        createdBy.hashCode;
  }
}
