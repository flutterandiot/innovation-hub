// ignore_for_file: public_member_api_docs, sort_constructors_first
/*
* Autogenerated header by File Header Comment extension - Donna Iwan
* File:       new_attribute.dart
* Created on: Thu Mar 23 2023
* Author:     Tong Vu Than Dan
*
* Copyright (c) 2023 Tong Vu Than Dan
* Website:     dantopia.vn
*
* Description: This dialog show when add new attribute for component
 */
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:innovation_hub/app/project/model/project_models.dart';
import 'package:innovation_hub/app/project/provider/project_provider.dart';
import 'package:innovation_hub/utils/app_utils.dart';

class NewAttributeDialog extends HookConsumerWidget {
  const NewAttributeDialog({
    super.key,
    required this.component,
  });
  final Component component;

  dialogContent(BuildContext context, WidgetRef ref) {
    final GlobalKey<FormState> formKey = GlobalKey<FormState>();

    final importanceLevel = useState<int>(1);
    final nameTextController = useTextEditingController(text: '');
    final descriptionTextController = useTextEditingController(text: '');

    return LayoutBuilder(
      builder: (context, constraints) {
        return Container(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
          width: constraints.maxWidth / 2,
          decoration: BoxDecoration(
            color: Theme.of(context).canvasColor,
            shape: BoxShape.rectangle,
            borderRadius: BorderRadius.circular(10),
            boxShadow: const [
              BoxShadow(
                color: Colors.black26,
                blurRadius: 10.0,
                offset: Offset(0.0, 10.0),
              ),
            ],
          ),
          child: Form(
            key: formKey,
            child: Column(
              mainAxisSize: MainAxisSize.min, // To make the card compact
              children: <Widget>[
                Row(
                  children: [
                    const Icon(Icons.attribution_rounded),
                    const SizedBox(width: 10),
                    Text(
                      'New Attribute',
                      style: Theme.of(context).textTheme.titleLarge,
                    ),
                  ],
                ),
                const SizedBox(height: 16.0),
                TextFormField(
                  controller: nameTextController,
                  decoration: const InputDecoration(
                    label: Text('Name'),
                  ),
                  validator: (value) {
                    return value!.isEmpty ? 'Please enter name' : null;
                  },
                ),
                const SizedBox(height: 16.0),
                TextFormField(
                  controller: descriptionTextController,
                  decoration: const InputDecoration(
                    label: Text('Description'),
                  ),
                  validator: (value) {
                    return value!.isEmpty ? 'Please enter description' : null;
                  },
                ),
                const SizedBox(height: 24.0),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text('Importance: ${importanceLevel.value}'),
                    Slider(
                      min: 1.0,
                      max: 5.0,
                      value: importanceLevel.value.toDouble(),
                      onChanged: (value) {
                        importanceLevel.value = value.toInt();
                      },
                    ),
                  ],
                ),
                const SizedBox(height: 10),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    ElevatedButton.icon(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      icon: const Icon(Icons.cancel),
                      label: const Text('Cancel'),
                    ),
                    const SizedBox(width: 20),
                    ElevatedButton.icon(
                      onPressed: () {
                        if (formKey.currentState!.validate()) {
                          final attribute = Attribute(
                            id: AppUtilities.getUid(),
                            name: nameTextController.text,
                            importance: importanceLevel.value,
                            description: descriptionTextController.text,
                          );
                          _saveAttribute(context, ref, component, attribute);
                          Navigator.of(context).pop();
                        }
                      },
                      icon: const Icon(Icons.check),
                      label: const Text('Save'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void _saveAttribute(
    BuildContext context,
    WidgetRef ref,
    Component component,
    Attribute attribute,
  ) {
    ref.read(activeProjectProvider.notifier).addAttribute(component, attribute);
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
      ),
      elevation: 0.0,
      backgroundColor: Colors.transparent,
      child: dialogContent(context, ref),
    );
  }
}
