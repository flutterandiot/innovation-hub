/*
* Autogenerated header by File Header Comment extension - Donna Iwan
* File:       idea_controller.dart
* Created on: Thu Mar 30 2023
* Author:     Tong Vu Than Dan
*
* Copyright (c) 2023 Tong Vu Than Dan
* Website:     dantopia.vn
*
* Description: This file is a place to manage idea with riverpod
 */
import 'package:flutter/foundation.dart';
import 'package:innovation_hub/app/model/component_model.dart';
import 'package:innovation_hub/app/model/idea_model.dart';
import 'package:innovation_hub/app/provider/project_provider.dart';
import 'package:innovation_hub/app/shared/user.dart';
import 'package:innovation_hub/utils/app_utils.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

import '../model/project_model.dart';

part 'idea_controller.g.dart';

@Riverpod(
  keepAlive: true,
)
class IdeaControl extends _$IdeaControl {
  @override
  Idea? build() => null;

  ///Set activie idea with [idea]
  // void setIdea(Idea? idea) {
  //   state = idea;
  // }

  Idea? generateNewIdea(Project ofProject, Component withComponent, SITTechniques using) {
    switch (using) {
      case SITTechniques.taskUnification:
        // TODO: Handle this case.
        return null;
      case SITTechniques.substraction:
        final concept = "Imagine you have a new ${ofProject.type} '${ofProject.name}' without the '${withComponent.name}'";
        final idea = Idea(
          id: AppUtilities.getUid(),
          concept: concept,
          name: '',
          rating: 1,
          benefit: 3,
          method: SITTechniques.substraction,
          componentId: withComponent.id,
          attributeIds: [],
          createdAt: AppUtilities.getTimeStampFromNow(),
          createdBy: User.demoUser1,
        );

        // check if this idea is already generated
        final ideaList = ref.read(ideasProvider);
        for (final id in ideaList) {
          if (id.concept.contains(idea.concept)) {
            debugPrint('Skip this concept');
            return null; // Skip the idea
          }
        }
        // else, update to the list
        debugPrint('Add this concenpt');
        state = idea;
        addIdeaToList(idea);
        return idea;
      case SITTechniques.multiplication:
        // TODO: Handle this case.
        return null;
      case SITTechniques.division:
        // TODO: Handle this case.
        return null;
      case SITTechniques.attributeDependency:
        // TODO: Handle this case.
        return null;
    }
  }

  ///Update the idea
  void updateIdea(Idea idea) {
    state = state?.copyWith(
      id: idea.id,
      name: idea.name,
      rating: idea.rating,
      benefit: idea.benefit,
      method: idea.method,
      componentId: idea.componentId,
      attributeIds: idea.attributeIds,
      createdAt: idea.createdAt,
      createdBy: idea.createdBy,
    );
  }

  /// If idea is liked, it will save to project ideas
  bool likeIdea() {
    // ref.read(activeProjectProvider).ideas?.add(idea);
    final project = ref.watch(activeProjectProvider);

    if (project.ideas.isEmpty || !project.ideas.contains(state)) {
      project.ideas.add(state!);

      ref.read(activeProjectProvider.notifier).updateProject(project);
      return true; // let the caller know it is added
    } else {
      return false; // let the caller know it is not added
    }
  }

  void addIdeaToList(Idea idea) {
    // final project = ref.watch(activeProjectProvider);
    debugPrint('ðŸ˜Ž ðŸ‘‰ Add idea to list of idea');
    // project.ideas?.add(idea);
    ref.read(ideasProvider.notifier).addIdea(state!);
  }

  void updateIdeaInList(Idea idea) {
    ref.read(ideasProvider.notifier).update(state!);
  }

  void removeIdeaFromList(Idea idea) {
    ref.read(ideasProvider.notifier).removeIdea(state!.id);
  }
}

@Riverpod(keepAlive: true)
class Ideas extends _$Ideas {
  @override
  List<Idea> build() {
    return [];
  }

  void addIdea(Idea idea) {
    // Since our state is immutable, we are not allowed to do `state.add(idea)`.
    // Instead, we should create a new list of todos which contains the previous
    // items and the new one.
    // Using Dart's spread operator here is helpful!
    state = [
      ...state,
      idea,
    ];
    // No need to call "notifyListeners" or anything similar. Calling "state ="
    // will automatically rebuild the UI when necessary.
  }

  void update(Idea withIdea) {
    final ideaMap = withIdea.toMap();
    state = [
      for (final idea in state)
        if (idea.id == withIdea.id) Idea.fromMap(ideaMap) else idea
    ];
  }

  void removeIdea(String ideaId) {
    state = state.where((idea) => idea.id != ideaId).toList();
  }
}
